// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String
  name      String
  password  String
  type      Int      @default(-1)
  image     String   @default("https://res.cloudinary.com/dig0nsb6m/image/upload/v1704869331/hjv353yrt9hahuomkxey.png")
  isBan     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Feedback      Feedback[]
  SearchHistory SearchHistory[]
  Message       Message[]
  Post          Post[]
  Request       Request[]
  Conversation  Conversation[]
  Comment       Comment[]

  School   School? @relation(fields: [schoolId], references: [id])
  schoolId Int?

  @@map("users")
}

model VerifyCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      Int
  createdAt DateTime @default(now())

  @@map("verifyCodes")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  User   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("feedbacks")
}

model SearchHistory {
  id      Int    @id @default(autoincrement())
  content String

  User   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("searchHistorys")
}

model School {
  id   Int    @id @default(autoincrement())
  name String

  User User[]

  @@map("schools")
}

model Conversation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User[]
  Message Message[]

  @@map("conversations")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  read      Boolean  @default(false)
  isImage   Boolean
  createdAt DateTime @default(now())

  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  User           User         @relation(fields: [userId], references: [id])
  userId         Int

  @@map("messages")
}

model Post {
  id             Int      @id @default(autoincrement())
  description    String
  verify         Int      @default(0)
  type           Boolean
  done           Boolean  @default(false)
  isDelete       Boolean  @default(false)
  sendProtection Boolean  @default(false)
  feedback       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Request  Request[]
  Location Location[]
  Image    Image[]
  Comment  Comment[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
  Item   Item  @relation(fields: [itemId], references: [id])
  itemId Int

  @@map("posts")
}

model Request {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())

  User   User @relation(fields: [userId], references: [id])
  userId Int
  Post   Post @relation(fields: [postId], references: [id])
  postId Int
  status Int  @default(0)

  @@map("requests")
}

model Location {
  id     Int    @id @default(autoincrement())
  name   String
  symbol String

  Post Post[]

  @@map("locations")
}

model Image {
  id  Int    @id @default(autoincrement())
  url String

  Post   Post? @relation(fields: [postId], references: [id])
  postId Int?

  @@map("images")
}

model Item {
  id   Int    @id @default(autoincrement())
  name String

  Post Post[]

  @@map("items")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  replies Comment[] @relation("ParentComment")

  parent   Comment? @relation("ParentComment", fields: [parentId], references: [id])
  parentId Int?
  Post     Post?    @relation(fields: [postId], references: [id])
  postId   Int?
  User     User?    @relation(fields: [userId], references: [id])
  userId   Int?

  Notification Notification?

  @@map("comments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  Comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @unique

  @@map("notifications")
}
